import java.util.ArrayList;

public class BinaryHeapPriorityQueue /* implements Comparable<T> */ {

	private int heap_size;
	private ArrayList<Node> A;

	public BinaryHeapPriorityQueue() {
		heap_size = 0;
		A = new ArrayList<Node>();
	}

	public BinaryHeapPriorityQueue(Integer[] items) throws Exception {
		heap_size = 0;
		A = new ArrayList<Node>();
		A.add(0, null);
		for (int i = 0; i < items.length; i++) {
			if (items[i] != null) {
				insert(items[i], i);
			}
		}
	}

	public void insert(int value, int priority) throws Exception {
		Node temp = new Node(Integer.MIN_VALUE, value);
		heap_size = heap_size + 1;
		A.add(heap_size, temp);
		increaseKey(heap_size, priority);
	}

	public Node ExtractMax() throws Exception {
		if (heap_size < 1)
			throw new Exception("heap underflow");
		Node max = A.get(1);
		A.set(1, A.get(heap_size));
		heap_size = heap_size - 1;
		maxHeapify(1);
		return max;
	}

	public void increaseKey(int i, int priority) throws Exception {
		if (priority < A.get(i).getPriority())
			throw new Exception("new key is smaller than current key");
		A.get(i).setPriority(priority);
		while (i > 1 && (A.get(parent(i)).getPriority() < A.get(i).getPriority())) {
			Node temp = A.get(i);
			A.set(i, A.get(parent(i)));
			A.set(parent(i), temp);

			i = parent(i);
		}
	}

	private void maxHeapify(int i) {
		int largest;
		int l = left(i);
		int r = right(i);
		if (l <= heap_size && A.get(l).getPriority() > A.get(r).getPriority())
			largest = l;
		else
			largest = i;
		if (r <= heap_size && A.get(r).getPriority() > A.get(largest).getPriority())
			largest = r;
		if (largest != i) {
			Node temp = A.get(i);
			A.set(i, A.get(largest));
			A.set(largest, temp);
			maxHeapify(largest);
		}
	}

	private int left(int i) {
		return 2 * i;
	}

	private int right(int i) {
		return 2 * i + 1;
	}

	private int parent(int i) {
		return (int) Math.floor(i / 2);
	}
	
	public int getSize() {
		return heap_size;
	}
	
	public void printArray() {
		for (int i = 1; i < A.size(); i++) {
			System.out.print(A.get(i).toString() + ", ");
		}
	}

//	@Override
//	private int compareTo(T item) {
//		if (item instanceof Integer) {
//			if (this < item) {
//				
//			}
//		}
//		return 0;
//	}
}
