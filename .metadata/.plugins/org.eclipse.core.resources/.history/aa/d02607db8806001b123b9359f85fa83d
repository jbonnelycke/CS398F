import java.util.Scanner;
import java.util.Stack;
import java.util.ArrayList;
import java.util.Random;

public class Driver {
	public static void main(String[] args) throws Exception {
		Scanner scan = new Scanner(System.in);
		Random rand = new Random();
		
		int universe, priority, val, n, m, selection, temp;
		long startTimebhc, endTimebhc, startTimevebc, endTimevebc, startTimebho, endTimebho, startTimevebo, endTimevebo;
		
		System.out.println("How big should the universe be?");
		universe = scan.nextInt();
		
		System.out.println("How many items do you want to insert?");
		n = scan.nextInt();
		
		System.out.println("How many operations should happen? (> # items)");
		m = scan.nextInt();
		
		Integer[] list = new Integer[universe];
		
//		for (int i = 0; i < universe; i++) {
//			list.add(i, null);
//		}
		
		for (int i = 0; i < n; i++) {
			priority = rand.nextInt(universe);
			val = rand.nextInt(universe);
			while (contains(list, priority)) {
				priority = rand.nextInt(universe);
				val = rand.nextInt(universe);
			}
			list[val] = priority;
		}
		
		startTimebhc = System.nanoTime();
		BinaryHeapPriorityQueue bhqueue = new BinaryHeapPriorityQueue(list);
		endTimebhc = System.nanoTime();
		System.out.println(endTimebhc - startTimebhc + " nanoseconds for Binary Heap Priority Queue construction");
		
		startTimevebc = System.nanoTime();
		vEBtreePriorityQueue vebqueue = new vEBtreePriorityQueue(universe, list);
		endTimevebc = System.nanoTime();
		System.out.println(endTimevebc - startTimevebc + " nanoseconds for Van Emde Boas Priority Queue construction");
		
		Stack<Integer> stk1 = new Stack<Integer>();
		Stack<Integer> stk2 = new Stack<Integer>();
		for (int i = 0; i < m; i++) {
			temp = rand.nextInt(3);
			stk1.push(temp);
			stk2.push(temp);
		}
		
		startTimebho = System.nanoTime();
		for (int i = 0; i < m ; i++) {
			selection = stk1.pop();
			switch (selection) {
			case 0:
				bhqueue.ExtractMax();
				break;
			case 1:
				priority = rand.nextInt(universe);
				val = rand.nextInt(universe);
				bhqueue.insert(val, priority);
				break;
			case 2:
				priority = rand.nextInt(bhqueue.getSize());
				val = rand.nextInt(universe);
				bhqueue.increaseKeyRandom(val, priority);
				break;
			}
		}
		endTimebho = System.nanoTime();
		System.out.println(endTimebho - startTimebho + " nanoseconds for Binary Heap Priority Queue operations");
		
		startTimevebo = System.nanoTime();
		for (int i = 0; i < m ; i++) {
			selection = stk2.pop();
			switch (selection) {
			case 0:
				vebqueue.ExtractMax();
				break;
			case 1:
				priority = rand.nextInt(universe);
				val = rand.nextInt(universe);
				vebqueue.Insert(priority, val);
				break;
			case 2:
				priority = rand.nextInt(universe);
				val = rand.nextInt(universe);
				vebqueue.IncreaseKey(priority, val);
				break;
			}
		}
		endTimevebo = System.nanoTime();
		System.out.println(endTimevebo - startTimevebo + " nanoseconds for Van Emde Boas Priority Queue operations");
		
		scan.close();
	}
	
	private static Boolean contains(Integer[] a, Integer x) {
		for (int i = 0; i < a.length; i++) {
			if (a[i] == x)
				return true;
		}
		return false;
	}
}
