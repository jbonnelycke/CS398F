
public class BinaryHeapPriorityQueue<T> {
	
	private static final int DEFAULT_CAPACITY = 10;
	
	private int heap_size;
	private T[] A;
	
	public BinaryHeapPriorityQueue() {
		
	}
	
	public BinaryHeapPriorityQueue(int capacity) {
		
	}
	
	public BinaryHeapPriorityQueue(T[] items) {
		
	}
	
	public void insert(T key) {
		heap_size = heap_size + 1;
		A[heap_size] = Integer.MIN_VALUE;
		increaseKey(heap_size, key);
	}
	
	public T ExtractMax() {
		if (heap_size < 1)
			throw new Exception("heap underflow");
		T max = A[1];
		A[1] = A[heap_size];
		heap_size = heap_size - 1;
		this.maxHeapify(1);
		return max;
		
	}
	
	public void increaseKey(int i, T key) {
		if (key < A[i]) 
			throw new Exception ("new key is smaller than current key");
		this.A[i] = key;
		while (i > 1 && A[parent(i)] < A[i]) {
			T temp = A[i];
			A[i] = A[parent(i)];
			A[parent(i)] = temp;
			
			i = parent(i);
		}
	}
	
	private void maxHeapify(int i) {
		T l = 
	}
	
	private int left(int i) {
		return 2 * i;
	}
	
	private int right(int i) {
		return 2 * i + 1;
	}
	
	private int parent(int i) {
		return (int) Math.floor(i / 2);
	}
	
	
	public T deleteMin() {
		
	}
	
	public boolean isEmpty() {
		
	}
	
	public void makeEmpty() {
		
	}
	
	private void percolateDown(int hole) {
		
	}
	private void buildHeap() {
		
	}
	
	private void enlargeArray(int newSize) {
		
	}
}
