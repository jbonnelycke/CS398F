import java.util.ArrayList;

public class BinaryHeapPriorityQueue /* implements Comparable<T> */ {

	private int heap_size;
	private ArrayList<Node> A;

	public BinaryHeapPriorityQueue() {
		heap_size = 0;
		A = new ArrayList<Node>();
	}

	public BinaryHeapPriorityQueue(Integer[][] items) throws Exception {
		heap_size = 0;
		A = new ArrayList<Node>();
		A.add(0, null);
		for (int i = 0; i < A.size(); i++) {
			if (items[i] != null) {
				insert(new Node(Integer.MIN_VALUE, items[i][1]), items[i][0]);
				heap_size++;
			}
		}
	}

	public void insert(Node node, int priority) throws Exception {
		heap_size = heap_size + 1;
		A.add(heap_size, node);
		increaseKey(heap_size, priority);
	}

	public Integer ExtractMax() throws Exception {
		if (heap_size < 1)
			throw new Exception("heap underflow");
		Integer max = A.get(1);
		A.set(1, A.get(heap_size));
		heap_size = heap_size - 1;
		this.maxHeapify(1);
		return max;

	}

	public void increaseKey(int i, Integer key) throws Exception {
		if (key < A.get(i))
			throw new Exception("new key is smaller than current key");
		A.set(i, key);
		while (i > 1 && A.get(parent(i)) < A.get(i)) {
			Integer temp = A.get(i);
			A.set(i, A.get(parent(i)));
			A.set(parent(i), temp);

			i = parent(i);
		}
	}

	private void maxHeapify(int i) {
		int largest;
		int l = left(i);
		int r = right(i);
		if (l < heap_size && A.get(l) > A.get(r))
			largest = l;
		else
			largest = i;
		if (r <= heap_size && A.get(r) > A.get(largest))
			largest = r;
		if (largest != i) {
			Integer temp = A.get(i);
			A.set(i, A.get(largest));
			A.set(largest, temp);
			maxHeapify(largest);
		}
	}

	private int left(int i) {
		return 2 * i;
	}

	private int right(int i) {
		return 2 * i + 1;
	}

	private int parent(int i) {
		return (int) Math.floor(i / 2);
	}

	private class Node {
		int priority;
		int value;
		
		Node(int priority, int value) {
			this.priority = priority;
			this.value = value;
		}
		
		private int getPriority() {
			return priority;
		}
		
		private int getValue() {
			return value;
		}
		
		private void setPriority(int newPriority) {
			priority = newPriority;
		}
		
		private void setValue(int newValue) {
			value = newValue;
		}
	}
//	@Override
//	private int compareTo(T item) {
//		if (item instanceof Integer) {
//			if (this < item) {
//				
//			}
//		}
//		return 0;
//	}
}
